{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to WSO2 Ballerina Integrator Documentation \u00b6 This is the home page of WSO2 ballerina integrator documentation.","title":"Home"},{"location":"#welcome-to-wso2-ballerina-integrator-documentation","text":"This is the home page of WSO2 ballerina integrator documentation.","title":"Welcome to WSO2 Ballerina Integrator Documentation"},{"location":"page-not-found/","text":"Page not found. \u00b6","title":""},{"location":"page-not-found/#page-not-found","text":"","title":"Page not found."},{"location":"administer-and-observe/observability/","text":"","title":"Observability"},{"location":"concepts/concepts/","text":"Concepts \u00b6","title":"Concepts"},{"location":"concepts/concepts/#concepts","text":"","title":"Concepts"},{"location":"develop/designing-an-integration-usecase/","text":"","title":"Designing an integration usecase"},{"location":"overview/about-this-release/","text":"WSO2 Enterprise Integrator (WSO2 EI) version 6.5.0 is the next level of the ESB, which provides a powerful solution for integrating systems. This brings together the functionalities encapsulated in the following WSO2 products: WSO2 Enterprise Service Bus (ESB) WSO2 Data Services Server (DSS) WSO2 Business Process Server (BPS) WSO2 Message Broker (MB) The features of the above products are encapsulated in WSO2 EI as separate runtimes (profiles). These profiles (which includes developer tooling, and analytics) are listed below. WSO2 EI version 6.5.0 is the successor of version 6.4.0. ESB profile: Consists of WSO2 ESB and WSO2 DSS. Business Process profile: Consists of WSO2 BPS for handling long-running business processes. Message Broker profile: Consists of WSO2 MB for brokering and reliable messaging. MSF4J profile: Provides the capability of creating microservices in Java to facilitate your integration use cases. Analytics profile: Provides the capability of monitoring statistics of integration flows (processed in the ESB runtime) as well as business process (processed in the Business Process runtime). For more information, see Introduction .","title":"About this Release"},{"location":"overview/introduction/","text":"Introduction \u00b6 Integration is at the heart of any digital transformation. By connecting different systems that make up your enterprise, you can build an organization that acts as one seamless digital system. WSO2 Enterprise Integrator (EI) is an open source product that enables comprehensive integration for cloud native and container-native projects. WSO2 EI enables you to do the following: Optimize systems and resources Leverage the cloud Reuse legacy systems Create a connected ecosystem for both your customers and partners. Connect enterprise systems to one another Make data accessible accross the enterprise Provide intuitive and visual development tools for continous integration and continous development Help integration developers to create new services and assets WSO2 EI comprises of profiles that offer different integration capabilities. The ESB profile in WSO2 EI provides its fundamental services through an event-driven and standards-based messaging engine (the bus), which allows integration architects to exploit the value of messaging without writing code. This ESB profile is a step ahead of the previous releases of WSO2 Enterprise Service Bus, as it provides data integration capabilities within the same runtime. This eliminates the need to use a separate data services server for your integration processes. The following diagram illustrates the message-flow architecture in the ESB profile of WSO2 EI, which is used for implementing integration flows. This shows how a request propagates to its actual endpoint through the ESB profile. Response handling is the reverse of this operation. Note that the components of the pipes are not in a specific order. An application (client) sends a message to the ESB profile of WSO2 EI. The message is picked up by a transport. The transport sends the message through a message pipe, which handles quality of service aspects such as security. Internally, this pipe is the in-flow and out-flow of the Axis2 engine. The ESB profile can operate in two modes: Mediating Messages - A single pipe is used. Proxy Services - Separate pipes connecting the transport to different proxy services are used. Both message transformation and routing can be considered as a single unit. As the diagram specifies, there is no clear separation between message transformation components and routing components. In the ESB profile of WSO2 EI, this is known as the mediation framework. Some transformations take place before the routing decision has been made while others take place after the routing decision. This is part of the Synapse implementation. The message is injected to the separate pipes depending on the destinations. Here again, quality of service aspects of the messages are determined. The transport layer takes care of the transport protocol transformations that are required before sending the message to the receiver application. The message is sent to the receiver application.","title":"Introduction"},{"location":"overview/introduction/#introduction","text":"Integration is at the heart of any digital transformation. By connecting different systems that make up your enterprise, you can build an organization that acts as one seamless digital system. WSO2 Enterprise Integrator (EI) is an open source product that enables comprehensive integration for cloud native and container-native projects. WSO2 EI enables you to do the following: Optimize systems and resources Leverage the cloud Reuse legacy systems Create a connected ecosystem for both your customers and partners. Connect enterprise systems to one another Make data accessible accross the enterprise Provide intuitive and visual development tools for continous integration and continous development Help integration developers to create new services and assets WSO2 EI comprises of profiles that offer different integration capabilities. The ESB profile in WSO2 EI provides its fundamental services through an event-driven and standards-based messaging engine (the bus), which allows integration architects to exploit the value of messaging without writing code. This ESB profile is a step ahead of the previous releases of WSO2 Enterprise Service Bus, as it provides data integration capabilities within the same runtime. This eliminates the need to use a separate data services server for your integration processes. The following diagram illustrates the message-flow architecture in the ESB profile of WSO2 EI, which is used for implementing integration flows. This shows how a request propagates to its actual endpoint through the ESB profile. Response handling is the reverse of this operation. Note that the components of the pipes are not in a specific order. An application (client) sends a message to the ESB profile of WSO2 EI. The message is picked up by a transport. The transport sends the message through a message pipe, which handles quality of service aspects such as security. Internally, this pipe is the in-flow and out-flow of the Axis2 engine. The ESB profile can operate in two modes: Mediating Messages - A single pipe is used. Proxy Services - Separate pipes connecting the transport to different proxy services are used. Both message transformation and routing can be considered as a single unit. As the diagram specifies, there is no clear separation between message transformation components and routing components. In the ESB profile of WSO2 EI, this is known as the mediation framework. Some transformations take place before the routing decision has been made while others take place after the routing decision. This is part of the Synapse implementation. The message is injected to the separate pipes depending on the destinations. Here again, quality of service aspects of the messages are determined. The transport layer takes care of the transport protocol transformations that are required before sending the message to the receiver application. The message is sent to the receiver application.","title":"Introduction"},{"location":"quick-start-guide/quick-start-guide/","text":"Quick Start Guide \u00b6 WSO2 Enterprise Integrator (WSO2 EI) is a comprehensive solution that allows you to seamlessly integrate applications, services, data, and business processes to support modern enterprise integration requirements. For this quick start guide, let's consider a basic Health Care System where WSO2 EI is used as the integration software. In this guide, an external party (a patient) wants to make a doctor's reservation at a given hospital. Before you begin, 1. Get a free trial subscription that enables you to download the product with the latest updates. Then, download the product installer from here , and run the installer. Download the back-end service and copy it to the <EI_HOME>/wso2/msf4j/deployment/microservices directory. The back-end service is now deployed in the MSF4J profile, which will run microservices for your integration flows. Start the MSF4J profile: Open a terminal and execute the following command: wso2ei-6.4.0-msf4j Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 MSF4J . This will open a terminal and start the MSF4J profile. If you are on a Windows OS, install cURL. For more information, see the cURL Releases and Downloads . Let's get started! Routing requests based on message content \u00b6 This is a 5-minute guide to give you a quick overview of how WSO2 EI mediates and routes messages from a front-end service (client) to a back-end service. Start the ESB profile: The WSO2 EI product consists of many profiles. The ESB profile is used to manage short-running and stateless integration. For more information, see the WSO2 EI Introduction . Open a terminal and execute the following command: wso2ei-6.4.0-integrator Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Integrator. This will open a terminal and start the ESB profile. Open the ESB profile Management Console using https://localhost:9443/carbon, and log in using admin as the username and the password. The Management Console provides a UI to configure WSO2 EI. WSO2 Carbon is the core platform on which WSO2 middleware products are built. Download the SampleServicesCompositeApplication_1.0.0.car file from GitHub. This file is a Carbon Application Archive (CAR file) containing the integration artifacts you will use in this tutorial, including: An API resource, which acts as the endpoint that accepts incoming requests from a client, routes them to the back-end service for processing, receives a response from the service, and sends the response back to the client. A Switch Mediator to route messages based on the message content to the relevant HTTP Endpoint defined in the ESB. A Log Mediator to log the message that the switch mediator is routing the message to the correct endpoint. A Send Mediator to send the appointment request to the correct hospital endpoint. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > in-sequence.png If you want to try out this same guide by configuring the artifacts, try out the Routing Requests Based on Message Content tutorial. Deploy the SampleServicesCompositeApplication_1.0.0.car as follows: On the Main tab of the Management Console, go to Manage > Carbon Applications and click Add. Click Choose File, select the SampleServicesCompositeApplication_1.0.0.car file that you downloaded, and click Upload. Refresh the page to see the Carbon application you just added in the Carbon Applications List screen. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > carbon-app.png Sending requests to WSO2 EI We are now ready to request a doctor's appointment at Grand Oak Community Hospital. Create a JSON file named request.json with the following payload to specify the details the back-end service needs to make the appointment: patient information, doctor name, hospital name, and appointment date. { \"patient\": { \"name\": \"John Doe\", \"dob\": \"1940-03-19\", \"ssn\": \"234-23-525\", \"address\": \"California\", \"phone\": \"8770586755\", \"email\": \"johndoe@gmail.com\" }, \"doctor\": \"thomas collins\", \"hospital\": \"grand oak community hospital\", \"appointment_date\": \"2025-04-02\" } If you want to request a different hospital, you can specify one of the following hospital names instead. clemency medical center pine valley community hospital Open a terminal, navigate to the directory where you have saved the request.json file, and execute the following cURL command. curl -v -X POST --data @request.json http://localhost:8280/healthcare/categories/surgery/reserve --header \"Content-Type:application/json\" This command sends the JSON payload you created in the previous step to the API resource http://localhost:8280/healthcare/categories/surgery/reserve, which was included in the CAR file you uploaded. The API resource contains the logic for routing appointment requests to the back-end service you deployed in the microservices directory. You get the following response: {\"appointmentNumber\":1,\"doctor\":{\"name\":\"thomas collins\",\"hospital\":\"grand oak community hospital\",\"category\":\"surgery\",\"availability\":\"9.00 a.m - 11.00 a.m\",\"fee\":7000.0},\"patient\":{\"name\":\"John Doe\",\"dob\":\"1940-03-19\",\"ssn\":\"234-23-525\",\"address\":\"California\",\"phone\":\"8770586755\",\"email\":\"johndoe@gmail.com\"},\"fee\":7000.0,\"confirmed\":false,\"appointmentDate\":\"2025-04-02\"} Now check the terminal window and you see the following message: INFO - LogMediator message = Routing to grand oak community hospital Congratulations, you have successfully completed this guide! In this tutorial, you have seen how you can create a request payload and send it to an endpoint in WSO2 EI, which routes the message to a back-end service and then sends a response back to the client. For more information on the artifacts used in the section, try out the Routing Requests Based on Message Content tutorial. Want to know more and evaluate WSO2 EI further? See the Other capabilities of WSO2 EI section given below. Other capabilities of WSO2 EI Try out the following use cases to understand other capabilites of WSO2 EI. Exposing a datasource as a service Let's look at how we can check the availability of doctors in the healthcare service by sending a request. To make things simple, you set up an already configured database that has the doctors details and exposethisdatabase as a data service using WSO2 EI. Follow the steps given below to check the doctors that are available without interacting with the database itself: Set up the back-end database First, let's set up a back-end database for our healthcare service. Follow the steps below to create the database. Download the dataServiceSample.zip file from GitHub and extract it to a location on your computer. Let's refer to the extracted dataServiceSample directory as , which contains the following: A DB script to create the back-end database (DATA_SERV_QSG) with the channeling information of the healthcare service. A pre-packaged data service (DOCTORS_DataService.dbs file), which can expose the back-end database as a service. Open a terminal, navigate to the directory, and execute the following command: ant -Ddshome=PATH_TO_EI_HOME The DATA_SERV_QSG database is now created in the /samples/data-services/database directory with information of all available doctors in the healthcare service. Expose the database as a data service Now, let's start the ESB profile and upload the sample data service: Start the ESB profile: If you have started the ESB profile previously, stop the server by pressing Ctrl+C and restart it using the following commands. Open a terminal and execute the following command: wso2ei-6.4.0-integrator Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Integrator. This will open a terminal and start the ESB profile. In your Web browser, navigate to the WSO2 EI management console using the following URL: https://localhost:9443/carbon/ Log in to the Management Console using the following credentials: Username: admin Password: admin Go to the Main tab and click Data Service > Upload. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > upload.png Upload the DOCTORS_DataService.dbs file from the directory. Refresh the page to see the deployed data service in the Deployed Services screen. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > deployed-doctors-service.png The database of the channeling service is now exposed through the DOCTORS_DataService data service, which we just deployed in WSO2 EI. Request doctors' information Assume that you want information on the availability of all surgeons. Open a terminal and execute the following command. Note that we are specifying 'surgery' as the specialty. curl -v http://localhost:8280/services/DOCTORS_DataService/getDoctors?SPECIALITY=surgery The information about the availability of all surgeons will be published on your terminal: thomas collins grand oak community hospital surgery 9.00 a.m - 11.00 a.m 7000 anne clement clemency medical center surgery 8.00 a.m - 10.00 a.m 12000 seth mears pine valley community hospital surgery 3.00 p.m - 5.00 p.m 8000 Congratulations, you have successfully sent a request to the data service! Want to know more and evaluate WSO2 EI further? See the other tutorials under the Other capabilities of WSO2 EI section. Guaranteeing message delivery Now, instead of sending the request directly to the back-end service, you store the request message in the Message Broker profile of WSO2 EI. You use a Message Processor to retrieve the message from the store and then deliver the message to the back-end service. Store and forward messaging is used for serving traffic to back-end services that can accept request messages only at a given rate. This is also used for guaranteed delivery to ensure that request received never gets lost since they are stored in the message store and also available for future reference. Let's get started! Configuring WSO2 EI Open the /conf/jndi.properties file and add the following line after the queue.MyQueue = example.MyQueue line: queue.PaymentRequestJMSMessageStore=PaymentRequestJMSMessageStore Start the Message broker profile: Open a terminal and execute the following command: wso2ei-6.4.0-broker Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Broker. This will open a terminal and start the Message Broker profile. Download the back-end service from GitHub. This will process appointment requests and copy it to the /wso2/msf4j/deployment/microservices directory. The back-end service is now deployed in the MSF4J profile, which will run microservices for your integration flows. Start the MSF4J profile to send requests to the back-end service: If you have started the MSF4J profile previously, skip this step. Open a terminal and execute the following command: wso2ei-6.4.0-msf4j Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 MSF4J. This will open a terminal and start the MSF4J profile. The Healthcare service is now active and you can start sending requests to the service. Start the ESB profile: If you have started the ESB profile previously, skip this step. Open a terminal and execute the following command: wso2ei-6.4.0-integrator Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Integrator. This will open a terminal and start the ESB profile. Open the ESB profile Management Console using https://localhost:9443/carbon, and log in using admin as the username and the password. Download the SampleServicesCompositeApplication_1.0.0.car file from GitHub. This file is a Carbon Application Archive (CAR file) containing the integration artifacts you will use in this tutorial, including: An API resource, which acts as the endpoint that accepts incoming requests from a client, routes them to the back-end service for processing, receives a response from the service, and sends the response back to the client. The back-end service that processes the appointment requests. A Switch Mediator to route messages based on the message content to the relevant HTTP Endpoint defined in the ESB. A Store Mediator to enqueues messages passing through its mediation sequence in a given message store. Deploy the SampleServicesCompositeApplication_1.0.0.car file as follows: Note: If you already deployed the SampleServicesCompositeApplication_1.0.0.car file when following the first part of the QSG, make sure to go to Manage > Carbon Applications > List and delete it before proceeding to the below steps. On the Main tab of the management console, go to Manage > Carbon Applications and click Add. Click Choose File, select the SampleServicesCompositeApplication_1.0.0.car file that you downloaded, and click Upload. Refresh the page to see the carbon application you just added in the Carbon Applications List screen. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > carbon-app.png Sending requests to WSO2 EI Create a JSON file named request.json with the following payload to specify the details the back-end service needs to make the appointment: patient information, doctor name, hospital name, and appointment date. { \"name\": \"John Doe\", \"dob\": \"1940-03-19\", \"ssn\": \"234-23-525\", \"address\": \"California\", \"phone\": \"8770586755\", \"email\": \"johndoe@gmail.com\", \"doctor\": \"thomas collins\", \"hospital\": \"grand oak community hospital\", \"cardNo\": \"7844481124110331\" } Open a command line terminal and execute the following command from the location where request.jsonfile you created is saved: curl -v -X POST --data @request.json http://localhost:8280/healthcare/categories/surgery/reserve --header \"Content-Type:application/json\" This command sends the JSON payload you created in the previous step to the API resource http://localhost:8280/healthcare/categories/surgery/reserve, which was included in the CAR file you uploaded. The API resource contains the logic for routing appointment requests to the back-end service you deployed in the microservices directory. You will see the response as follows: {\"message\":\"Payment request successfully submitted. Payment confirmation will be sent via email.\"} Check the terminal window and you see that the response from SettlePaymentEP is logged as follows: [2018-06-07 11:46:48,936] [EI-Core] INFO - LogMediator message = Routing to grand oak community hospital [2018-06-07 11:46:48,949] [EI-Core] INFO - TimeoutHandler This engine will expire all callbacks after GLOBAL_TIMEOUT: 120 seconds, irrespective of the timeout action, after the specified or optional timeout [2018-06-07 11:46:52,003] [EI-Core] INFO - LogMediator To: http://www.w3.org/2005/08/addressing/anonymous, WSAction: , SOAPAction: , MessageID: urn:uuid:995e37e3-8900-4da8-8eea-67da91de2c12, Direction: request, Envelope: <?xml version='1.0' encoding='utf-8'?> 1 thomas collins John Doe 7000.0 20 5600.0 eb83d9cc-0230-4dc8-a613-33b419cebbd7 Settled Congratulations, you have successfully sent a message to the WSO2 ESB profile! For more information on the artifacts used in the section, you can try out the Storing and Forwarding Messages tutorial. Defining a BPMN process In this section, a simple BPMN process is used. It prints out a 'Hello World!' message when the process instance is initiated. Download the HelloWorldServiceTask-1.0.0.jar file from GitHub. This includes the defined BPMN process. Copy the JAR file to the /lib directory. Start the BPS profile: The WSO2 EI product has many profiles. long-running, stateful business processes are run using the Business Process profile. For more information, see the WSO2 EI Overview. Open a terminal and execute the following command: wso2ei-6.4.0-business-process Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Business Process. This will open a terminal and start the Business Process profile. In a new browser window or tab, open the EI-Business Process Management Console: https://localhost:9445/carbon/ Log in to the EI-Business Process Management Console using admin for both the username and password. Download the HelloWorld.bar file from GitHub. In the Management Console, navigate to the main tab, click BPMN, and upload the HelloWorld.bar file. Refresh the page to see the file you just added Log into the BPMN-explorer at https://localhost:9445/bpmn-explorer using admin for both the username and password. Go to the PROCESS tab and click Start to start the Hello World Process. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > BPS_BPMNExplorer.jpg In the terminal, the \"Hello World ...!!!\" string is printed out. You have successfully defined a BPMN process and initiated it! For more information on the artifacts used in this section, try out the Creating a BPMN Process tutorial. WSO2 EI offers much more! Check out the Additional section and explore the product. Additional In comparison with the conventional ESB profile, the start-up time of the Micro Integrator profile is considerably less, which makes it container-friendly, and thereby, is ideal to use it for microservices in a container-based environment. For more information, try out the Sending a Simple Message to a Service Using the Micro Integratortutorial. Work with WSO2 EI connectors. For all the connectors supported by WSO2 EI, see WSO2 ESB Connectors. Use the Gmail connector in WSO2 EI by trying out the Using the Gmail Connector tutorial. All the CAR files that were used in this tutorial was developed using EI Tooling. You can try it out by following the tutorials listed under Integration Tutorials. Use the EI Analytics to analyze the mediation statistics. For more information, try out the tutorial on Using the Analytics Dashboard.","title":"Concepts"},{"location":"quick-start-guide/quick-start-guide/#quick-start-guide","text":"WSO2 Enterprise Integrator (WSO2 EI) is a comprehensive solution that allows you to seamlessly integrate applications, services, data, and business processes to support modern enterprise integration requirements. For this quick start guide, let's consider a basic Health Care System where WSO2 EI is used as the integration software. In this guide, an external party (a patient) wants to make a doctor's reservation at a given hospital. Before you begin, 1. Get a free trial subscription that enables you to download the product with the latest updates. Then, download the product installer from here , and run the installer. Download the back-end service and copy it to the <EI_HOME>/wso2/msf4j/deployment/microservices directory. The back-end service is now deployed in the MSF4J profile, which will run microservices for your integration flows. Start the MSF4J profile: Open a terminal and execute the following command: wso2ei-6.4.0-msf4j Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 MSF4J . This will open a terminal and start the MSF4J profile. If you are on a Windows OS, install cURL. For more information, see the cURL Releases and Downloads . Let's get started!","title":"Quick Start Guide"},{"location":"quick-start-guide/quick-start-guide/#routing-requests-based-on-message-content","text":"This is a 5-minute guide to give you a quick overview of how WSO2 EI mediates and routes messages from a front-end service (client) to a back-end service. Start the ESB profile: The WSO2 EI product consists of many profiles. The ESB profile is used to manage short-running and stateless integration. For more information, see the WSO2 EI Introduction . Open a terminal and execute the following command: wso2ei-6.4.0-integrator Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Integrator. This will open a terminal and start the ESB profile. Open the ESB profile Management Console using https://localhost:9443/carbon, and log in using admin as the username and the password. The Management Console provides a UI to configure WSO2 EI. WSO2 Carbon is the core platform on which WSO2 middleware products are built. Download the SampleServicesCompositeApplication_1.0.0.car file from GitHub. This file is a Carbon Application Archive (CAR file) containing the integration artifacts you will use in this tutorial, including: An API resource, which acts as the endpoint that accepts incoming requests from a client, routes them to the back-end service for processing, receives a response from the service, and sends the response back to the client. A Switch Mediator to route messages based on the message content to the relevant HTTP Endpoint defined in the ESB. A Log Mediator to log the message that the switch mediator is routing the message to the correct endpoint. A Send Mediator to send the appointment request to the correct hospital endpoint. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > in-sequence.png If you want to try out this same guide by configuring the artifacts, try out the Routing Requests Based on Message Content tutorial. Deploy the SampleServicesCompositeApplication_1.0.0.car as follows: On the Main tab of the Management Console, go to Manage > Carbon Applications and click Add. Click Choose File, select the SampleServicesCompositeApplication_1.0.0.car file that you downloaded, and click Upload. Refresh the page to see the Carbon application you just added in the Carbon Applications List screen. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > carbon-app.png Sending requests to WSO2 EI We are now ready to request a doctor's appointment at Grand Oak Community Hospital. Create a JSON file named request.json with the following payload to specify the details the back-end service needs to make the appointment: patient information, doctor name, hospital name, and appointment date. { \"patient\": { \"name\": \"John Doe\", \"dob\": \"1940-03-19\", \"ssn\": \"234-23-525\", \"address\": \"California\", \"phone\": \"8770586755\", \"email\": \"johndoe@gmail.com\" }, \"doctor\": \"thomas collins\", \"hospital\": \"grand oak community hospital\", \"appointment_date\": \"2025-04-02\" } If you want to request a different hospital, you can specify one of the following hospital names instead. clemency medical center pine valley community hospital Open a terminal, navigate to the directory where you have saved the request.json file, and execute the following cURL command. curl -v -X POST --data @request.json http://localhost:8280/healthcare/categories/surgery/reserve --header \"Content-Type:application/json\" This command sends the JSON payload you created in the previous step to the API resource http://localhost:8280/healthcare/categories/surgery/reserve, which was included in the CAR file you uploaded. The API resource contains the logic for routing appointment requests to the back-end service you deployed in the microservices directory. You get the following response: {\"appointmentNumber\":1,\"doctor\":{\"name\":\"thomas collins\",\"hospital\":\"grand oak community hospital\",\"category\":\"surgery\",\"availability\":\"9.00 a.m - 11.00 a.m\",\"fee\":7000.0},\"patient\":{\"name\":\"John Doe\",\"dob\":\"1940-03-19\",\"ssn\":\"234-23-525\",\"address\":\"California\",\"phone\":\"8770586755\",\"email\":\"johndoe@gmail.com\"},\"fee\":7000.0,\"confirmed\":false,\"appointmentDate\":\"2025-04-02\"} Now check the terminal window and you see the following message: INFO - LogMediator message = Routing to grand oak community hospital Congratulations, you have successfully completed this guide! In this tutorial, you have seen how you can create a request payload and send it to an endpoint in WSO2 EI, which routes the message to a back-end service and then sends a response back to the client. For more information on the artifacts used in the section, try out the Routing Requests Based on Message Content tutorial. Want to know more and evaluate WSO2 EI further? See the Other capabilities of WSO2 EI section given below. Other capabilities of WSO2 EI Try out the following use cases to understand other capabilites of WSO2 EI. Exposing a datasource as a service Let's look at how we can check the availability of doctors in the healthcare service by sending a request. To make things simple, you set up an already configured database that has the doctors details and exposethisdatabase as a data service using WSO2 EI. Follow the steps given below to check the doctors that are available without interacting with the database itself: Set up the back-end database First, let's set up a back-end database for our healthcare service. Follow the steps below to create the database. Download the dataServiceSample.zip file from GitHub and extract it to a location on your computer. Let's refer to the extracted dataServiceSample directory as , which contains the following: A DB script to create the back-end database (DATA_SERV_QSG) with the channeling information of the healthcare service. A pre-packaged data service (DOCTORS_DataService.dbs file), which can expose the back-end database as a service. Open a terminal, navigate to the directory, and execute the following command: ant -Ddshome=PATH_TO_EI_HOME The DATA_SERV_QSG database is now created in the /samples/data-services/database directory with information of all available doctors in the healthcare service. Expose the database as a data service Now, let's start the ESB profile and upload the sample data service: Start the ESB profile: If you have started the ESB profile previously, stop the server by pressing Ctrl+C and restart it using the following commands. Open a terminal and execute the following command: wso2ei-6.4.0-integrator Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Integrator. This will open a terminal and start the ESB profile. In your Web browser, navigate to the WSO2 EI management console using the following URL: https://localhost:9443/carbon/ Log in to the Management Console using the following credentials: Username: admin Password: admin Go to the Main tab and click Data Service > Upload. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > upload.png Upload the DOCTORS_DataService.dbs file from the directory. Refresh the page to see the deployed data service in the Deployed Services screen. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > deployed-doctors-service.png The database of the channeling service is now exposed through the DOCTORS_DataService data service, which we just deployed in WSO2 EI. Request doctors' information Assume that you want information on the availability of all surgeons. Open a terminal and execute the following command. Note that we are specifying 'surgery' as the specialty. curl -v http://localhost:8280/services/DOCTORS_DataService/getDoctors?SPECIALITY=surgery The information about the availability of all surgeons will be published on your terminal: thomas collins grand oak community hospital surgery 9.00 a.m - 11.00 a.m 7000 anne clement clemency medical center surgery 8.00 a.m - 10.00 a.m 12000 seth mears pine valley community hospital surgery 3.00 p.m - 5.00 p.m 8000 Congratulations, you have successfully sent a request to the data service! Want to know more and evaluate WSO2 EI further? See the other tutorials under the Other capabilities of WSO2 EI section. Guaranteeing message delivery Now, instead of sending the request directly to the back-end service, you store the request message in the Message Broker profile of WSO2 EI. You use a Message Processor to retrieve the message from the store and then deliver the message to the back-end service. Store and forward messaging is used for serving traffic to back-end services that can accept request messages only at a given rate. This is also used for guaranteed delivery to ensure that request received never gets lost since they are stored in the message store and also available for future reference. Let's get started! Configuring WSO2 EI Open the /conf/jndi.properties file and add the following line after the queue.MyQueue = example.MyQueue line: queue.PaymentRequestJMSMessageStore=PaymentRequestJMSMessageStore Start the Message broker profile: Open a terminal and execute the following command: wso2ei-6.4.0-broker Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Broker. This will open a terminal and start the Message Broker profile. Download the back-end service from GitHub. This will process appointment requests and copy it to the /wso2/msf4j/deployment/microservices directory. The back-end service is now deployed in the MSF4J profile, which will run microservices for your integration flows. Start the MSF4J profile to send requests to the back-end service: If you have started the MSF4J profile previously, skip this step. Open a terminal and execute the following command: wso2ei-6.4.0-msf4j Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 MSF4J. This will open a terminal and start the MSF4J profile. The Healthcare service is now active and you can start sending requests to the service. Start the ESB profile: If you have started the ESB profile previously, skip this step. Open a terminal and execute the following command: wso2ei-6.4.0-integrator Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Integrator. This will open a terminal and start the ESB profile. Open the ESB profile Management Console using https://localhost:9443/carbon, and log in using admin as the username and the password. Download the SampleServicesCompositeApplication_1.0.0.car file from GitHub. This file is a Carbon Application Archive (CAR file) containing the integration artifacts you will use in this tutorial, including: An API resource, which acts as the endpoint that accepts incoming requests from a client, routes them to the back-end service for processing, receives a response from the service, and sends the response back to the client. The back-end service that processes the appointment requests. A Switch Mediator to route messages based on the message content to the relevant HTTP Endpoint defined in the ESB. A Store Mediator to enqueues messages passing through its mediation sequence in a given message store. Deploy the SampleServicesCompositeApplication_1.0.0.car file as follows: Note: If you already deployed the SampleServicesCompositeApplication_1.0.0.car file when following the first part of the QSG, make sure to go to Manage > Carbon Applications > List and delete it before proceeding to the below steps. On the Main tab of the management console, go to Manage > Carbon Applications and click Add. Click Choose File, select the SampleServicesCompositeApplication_1.0.0.car file that you downloaded, and click Upload. Refresh the page to see the carbon application you just added in the Carbon Applications List screen. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > carbon-app.png Sending requests to WSO2 EI Create a JSON file named request.json with the following payload to specify the details the back-end service needs to make the appointment: patient information, doctor name, hospital name, and appointment date. { \"name\": \"John Doe\", \"dob\": \"1940-03-19\", \"ssn\": \"234-23-525\", \"address\": \"California\", \"phone\": \"8770586755\", \"email\": \"johndoe@gmail.com\", \"doctor\": \"thomas collins\", \"hospital\": \"grand oak community hospital\", \"cardNo\": \"7844481124110331\" } Open a command line terminal and execute the following command from the location where request.jsonfile you created is saved: curl -v -X POST --data @request.json http://localhost:8280/healthcare/categories/surgery/reserve --header \"Content-Type:application/json\" This command sends the JSON payload you created in the previous step to the API resource http://localhost:8280/healthcare/categories/surgery/reserve, which was included in the CAR file you uploaded. The API resource contains the logic for routing appointment requests to the back-end service you deployed in the microservices directory. You will see the response as follows: {\"message\":\"Payment request successfully submitted. Payment confirmation will be sent via email.\"} Check the terminal window and you see that the response from SettlePaymentEP is logged as follows: [2018-06-07 11:46:48,936] [EI-Core] INFO - LogMediator message = Routing to grand oak community hospital [2018-06-07 11:46:48,949] [EI-Core] INFO - TimeoutHandler This engine will expire all callbacks after GLOBAL_TIMEOUT: 120 seconds, irrespective of the timeout action, after the specified or optional timeout [2018-06-07 11:46:52,003] [EI-Core] INFO - LogMediator To: http://www.w3.org/2005/08/addressing/anonymous, WSAction: , SOAPAction: , MessageID: urn:uuid:995e37e3-8900-4da8-8eea-67da91de2c12, Direction: request, Envelope: <?xml version='1.0' encoding='utf-8'?> 1 thomas collins John Doe 7000.0 20 5600.0 eb83d9cc-0230-4dc8-a613-33b419cebbd7 Settled Congratulations, you have successfully sent a message to the WSO2 ESB profile! For more information on the artifacts used in the section, you can try out the Storing and Forwarding Messages tutorial. Defining a BPMN process In this section, a simple BPMN process is used. It prints out a 'Hello World!' message when the process instance is initiated. Download the HelloWorldServiceTask-1.0.0.jar file from GitHub. This includes the defined BPMN process. Copy the JAR file to the /lib directory. Start the BPS profile: The WSO2 EI product has many profiles. long-running, stateful business processes are run using the Business Process profile. For more information, see the WSO2 EI Overview. Open a terminal and execute the following command: wso2ei-6.4.0-business-process Go to Start Menu -> Programs -> WSO2 -> Enterprise Integrator 6.4.0 Business Process. This will open a terminal and start the Business Process profile. In a new browser window or tab, open the EI-Business Process Management Console: https://localhost:9445/carbon/ Log in to the EI-Business Process Management Console using admin for both the username and password. Download the HelloWorld.bar file from GitHub. In the Management Console, navigate to the main tab, click BPMN, and upload the HelloWorld.bar file. Refresh the page to see the file you just added Log into the BPMN-explorer at https://localhost:9445/bpmn-explorer using admin for both the username and password. Go to the PROCESS tab and click Start to start the Hello World Process. WSO2 Enterprise Integrator 6.4.0 > Quick Start Guide > BPS_BPMNExplorer.jpg In the terminal, the \"Hello World ...!!!\" string is printed out. You have successfully defined a BPMN process and initiated it! For more information on the artifacts used in this section, try out the Creating a BPMN Process tutorial. WSO2 EI offers much more! Check out the Additional section and explore the product. Additional In comparison with the conventional ESB profile, the start-up time of the Micro Integrator profile is considerably less, which makes it container-friendly, and thereby, is ideal to use it for microservices in a container-based environment. For more information, try out the Sending a Simple Message to a Service Using the Micro Integratortutorial. Work with WSO2 EI connectors. For all the connectors supported by WSO2 EI, see WSO2 ESB Connectors. Use the Gmail connector in WSO2 EI by trying out the Using the Gmail Connector tutorial. All the CAR files that were used in this tutorial was developed using EI Tooling. You can try it out by following the tutorials listed under Integration Tutorials. Use the EI Analytics to analyze the mediation statistics. For more information, try out the tutorial on Using the Analytics Dashboard.","title":"Routing requests based on message content"},{"location":"references/ei_config_catalog/","text":"Configuration Catalog \u00b6 This document describes all the configuration parameters that are used in WSO2 API Manager. Instructions for use \u00b6 Select the configuration sections, parameters, and values that are required for your use and add them to the .toml file. See the example .toml file given below. ## This is an example .toml file. [deployment] ##Config section. pattern=\"value\" ##Parameter-value pair. node_act_as=\"value\" ##Parameter-value pair. [key_mgr_node] ##Config section. endpoints=\"value\" ##Parameter-value pair. [gateway]. ##Config section. gateway_environments=[\"dev\",\"test\"] ##Parameter-value pair. [[database]] ##Config section pool_options.maxActiv=\"5\" Configuring the default deployment settings \u00b6 Config Heading [server] This toml header groups the parameters that define the server node details. Default Enabled with default settings. Mandatory Parameters hostname The hostname of the computer on which the product server is running. Default \"localhost\" Mandatory node_ip The IP address of the computer on which the product server is running. Default \"127.0.0.1\" Mandatory enable_mtom Use this paramater to enable MTOM (Message Transmission Optimization Mechanism) for the product server. Read more about MTOM messaging. Optional Default MTOM is disabled. Possible Values \"true\" to enable MTOM. enable_swa Use this paramater to enable SwA (SOAP with Attachments) for the product server. When SwA is enabled, the ESB will process the files attached to SOAP messages. Read more about SwA messaging. Default SwA is disabled. Possible Values Use \"true\" to enable SwA. Optional Connecting to the primary data store \u00b6 Config Heading [database.shared_db] This config heading that groups the parameters connecting the server to the primary database. This database stores the user permissions that apply to user roles. This also stores the users and roles unless a separate user store is configured with the [user_store] config section. Read more about setting up databases for WSO2 EI. Default The embedded H2 database (stored in the EI_HOME/repository/database/ directory) is enabled. Mandatory Parameters type The type of database that is used for the primary database. All the database types that are supported by this product is listed below as possible values. Optional Default \"H2\" Possible Values \"H2\" (not recommended for production environments), \"MySql\", \"Oracle\", \"Postgre\" url The connection URL of the database. Note that this is specific to the database type you are using. Default Mandatory username The user name for connecting to the primary database. Default \"wso2carbon\" Mandatory password The password for connecting to the database. Default \"wso2carbon\" Mandatory Tuning the primary data store connection \u00b6 Config Heading [database.shared_db.pool_options] This config heading in the ei.toml file groups the performance tuning parameters of the primary database that you configured using the [database.shared_db] section. Read more about tuning database performance in WSO2 EI. Default Enabled with default settings. Mandatory Parameters maxActive The maximum number of active connections that can be allocated at the same time from the connection pool. If there are too many active connections in the connection pool, some of them would be idle, which incurs an unnecessary system overhead. Default \"50\" Possible Values Depends on environment. Enter any negative value to denote an unlimited number of active connections. Optional maxWait The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. Default \"6000\" Possible Values Depends on environment. Enter zero or a negative value to wait indefinitely. Optional testOnBorrow Determines whether objects are validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another. Default Enabled Possible Value Use \"false\" to disable testOnBorrow. Optional validationInterval Connections are validated (at the most) at this frequency (time in milliseconds). If a connection is due for validation but has been validated previously within this interval, it will not be validated again. This avoids access validation. Default \"30000\" Possible Values Depends on environment. Optional defaultAutoCommit Specifies whether each SQL statement should be automatically committed when the operation is completed. It is recommended to disable auto committing. Default Enabled Possible Values Use \"false\" to disable default auto commit. Optional Connecting to the user stores \u00b6 Config Heading [user_store] This config heading in the ei.toml connects the server to the user store. The user store holds the users and roles defined for the system. Read more about user management in WSO2 EI. Default The primary database is enabled as the user store. Mandatory Parameters type The type of user store. Default \"database\" Possible Values \"database\" refers the embedded H2 database with the settings defined under [database.shared_db], \"JDBC\" refers an external RDBMS. \"RW LDAP\" refers an external LDAP with both read/write access, \"RO LDAP\" refers an external LDAP with read only access, \"AD\" refers an active directory user store, \"Custom\" refers a custom user store implementation. Mandatory connection_url The connection URL of the LDAP or AD user store. Default Not used. Optional connection_name The connection name of an LDAP/AD user store. Default Not used. Possible Values \"uid=admin,ou=wso2ei\" Optional connection_password The password for connecting to an LDAP/AD user store. Default Not used. Possible Values \"$secret{ldap_password}\" is used to refer the ....... Optional base_dn The ........ Default Not used. Possible Values \"dc=example,dc=com\" Configuring the system administrator \u00b6 Config Heading [super_admin] : The config heading in the ei.toml file that groups the parameters defining the system adminsitrator. Default Enabled with the default parameters. Mandatory Parameters username The user name of the system administrator. This user has all permissions enabled by default. Default \"admin\" Possible Values Any alpha numeric value. Mandatory password The password of the system adminsitrator. Default \"admin\" Possible Values Any alpha numeric value. Mandatory create_admin_account Sets whether the system administrator credentials should be created in the system at the time of starting the server. Default Enabled Possible Values Use \"false\" to disable. Mandatory Configuring the keystore \u00b6 Config Heading [keystore.tls] This config heading in the ei.toml file groups the parameters that connect the server to the keystore used for SSL handshaking when the server communicates with another server. All keystore files used by this product should be stored in the EI_HOME/repository/resources/security/ directory. The product is configured to use the default keystore (wso2carbon.jks), which contains the key pair that is used for all encryption/decryption purposes. Read more about asymetric encryption in WSO2 EI. Default Enabled with default parameters. Mandatory Parameters file_name The name of the keystore file that is used for SSL communication. Default \"wso2carbon.jks\" Mandatory type The type of the keystore file. Default \"JKS\" Possible Values \"JKS\" or \"PKCS12\" Optional password The password of the keystore file that is used for SSL communication. The keystore password is used when accessing the keys in the keystore. Default \"wso2carbon\" Mandatory alias The alias of the public key corresponding to the private key that is included in the keystore. The public key is used for encrypting data in the ESB server, which only the corresponding private key can decrypt. The public key is embedded in a digital certificate, and this certificate can be shared over the internet by storing it in a separate trust store file. Default \"wso2carbon\" Mandatory key_password The password of the private key that is included in the keystore. The private key is used to decrypt the data that has been encrypted using the keystore's public key. Default \"wso2carbon\" Mandatory Configuring the truststore \u00b6 Config Heading [truststore] Add this config heading to the ei.toml file to group the parameters that connect the server to the keystore file (trust store) that is used to store the digital certificates that the server trusts for SSL communication. All keystore files used by this product should be stored in the EI_HOME/repository/resources/security/ directory. The product is configured to use the default trust store (wso2truststore.jks), which contains the self-signed digital certificate of the default keystore. Read more about asymetric encryption in WSO2 EI. Default Enabled with default parameters. Mandatory Parameters file_name The name of the keystore file that is used for storing the trusted digital certificates. Default \"wso2truststore.jks\" Mandatory type The type of the keystore file that is used as the trust store. Default \"JKS\" Possible Values \"JKS\" or \"PKCS12\" Optional password The password of the keystore file that is used as the trust store. Default \"wso2carbon\" Possible Values See the content on generating keystores. Mandatory alias The alias is the password of the digital certificate (which holds the public key) that is included in the trustore. Default \"symmetric.key.value\" Possible Values See the content on generating digital certificates. Mandatory algorithm The password of the ... Default \"AES\" Possible Value Mandatory Configuring the HTTP transport \u00b6 Config Heading [transport.http] Add this config heading to the ei.toml file to group the parameters for configuring the HTTP/S transports in the product. Default Disabled. Optional Parameters socket_timeout_millis ................ Default \"180000\" Possible Values Mandatory listener.port The port on which this transport receiver should listen for incoming messages. Default \"8280\" Possible Values Mandatory listener.wsdl_epr_prefix A URL prefix which will be added to all service EPRs and EPRs in WSDLs etc. Default \"https://apachehost:port/somepath\" Possible Values Mandatory listener.secured_port The port on which this transport receiver should listen for incoming messages. Default \"8280\" Possible Values Mandatory listener.secured_wsdl_epr_prefix A URL prefix which will be added to all service EPRs and EPRs in WSDLs etc. Default \"https://apachehost:port/somepath\" Possible Values Mandatory sender.warn_on_http_500 ........ Default \"*\" Possible Value Mandatory sender.proxy_hostname If the outgoing messages should be sent through an HTTP proxy server, use this parameter to specify the target proxy. Default \"${deployement.node_ip}\" Possible Value Mandatory sender.proxy_port The port through which the target proxy accepts HTTP traffic. Default \"3128\" Possible Value Mandatory sender.non_proxy_hostnames The list of hosts to which the HTTP traffic should be sent directly without going through the proxy. When trying to add multiple hostnames along with an asterisk in order to define a set of sub-domains for non-proxy hosts, you need to add a period before the asterisk when configuring proxy server. \".*.abc.my.com|localhost\" Default \"localhost|moon|sun\" Possible Value Mandatory blocking_sender.enable_client_caching This parameter is used to specify whether the HTTP client should save cache entries and the cached responses in the JVM memory or not. Default Enabled Possible Value Use \"false\" to disable. Mandatory blocking_sender.transfer_encoding This parameter enables you to specify whether the data sent should be chunked. It can be used instead of the Content-Length header if you want to upload data without having to know the amount of data to be uploaded in advance. Default \"chunked\" Possible Value Mandatory blocking_sender.default_connections_per_host The maximum number of connections that will be created per host server by the client. If the backend server is slow, the connections in use at a given time will take a long time to be released and added back to the connection pool. As a result, connections may not be available for some requests and you may get the org.apache.commons.httpclient.ConnectionPoolTimeoutException: Timeout waiting for connection error. In such situations, it is recommended to increase the value for this parameter. Default \"200\" Possible Value Mandatory blocking_sender.omit_soap12_action If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages. Default Enabled Possible Value Use \"fales\" to disable. Mandatory Configuring the Local transport \u00b6 Config Heading [transport.local] This parameter is used to enable the listeners and senders when the ESB server communicates through the local transport. Default Disabled Optional Parameters listener.enable The parameter for enabling the local transport listener. Default Disabled Possible Values Mandatory sender.enable The parameter for enabling the local transport sender. Default Disabled Possible Values Mandatory Configuring the VFS transport \u00b6 Config Heading [transport.vfs] Add this config heading to the ei.toml file to group the parameters that configure the ESB server to communicate through the VFS transport. Read more about file transfering in the ESB. Default Enabled Mandatory Parameters listener.enable The parameter for enabling the VFS listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory sender.enable The parameter for enabling the VFS sender in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory Configuring the MAIL transport \u00b6 Config Heading [transport.mail] Add this config heading to the ei.toml file to group the parameters that configure the ESB server to communicate through the MAIL transport. Read more about using the MAIL transport. Default Disabled Optional Parameters listener.enable The parameter for enabling the MAIL transport listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory sender.hostname ..... Default \"smtp.gmail.com\" Possible Values Mandatory sender.port ...... Default 587 Possible Values Mandatory sender.enable_tls Specifies whether TLS should be enabled. Default Enabled. Possible Values Use \"true\" to enable. Mandatory sender.auth Specifies whether the user should be authenticated. Default Enabled. Possible Values Use \"true\" to enable. Mandatory sender.username The user name of the email account (mail sender). Note that in some email service providers, the user name is the same as the email address specified for the 'From' parameter. Default \"demo_user\" Possible Values Mandatory sender.password The password of the email account (mail sender). Default \"mailpassword\" Possible Values Mandatory sender.from The email address from which mails will be sent. Default \"demo_user@wso2.com\" Possible Values Mandatory Configuring the FIX transport \u00b6 Config Heading [transport.fix] Add this config heading to the ei.toml to group the parameters that configure the ESB server to communicate through the FIX transport. Read more about how the ESB uses FIX communication. Default Disabled Optional Parameters listener.enable The parameter for enabling the FIX listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory sender.enable The parameter for enabling the FIX sender in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory Configuring the HL7 transport \u00b6 Config Heading [transport.hl7] Add this config heading to group the parameters that configure the ESB server communicate through the HL7 transport. Read more about HL7 communication in the ESB. Default Disabled Optional Parameters listener.enable The parameter for enabling the HL7 listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory sender.enable The parameter for enabling the HL7 sender in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory Configuring the SAP transport \u00b6 Config Heading [transport.sap] Add this config heading to the ei.toml file to group the parameters that configure the ESB to communicate with a SAP system. Read more about SAP integration of the ESB. Default Disabled Optional Parameters listener.enable The parameter for enabling the SAP listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Optional sender.enable The parameter for enabling the SAP sender in the ESB. Default Disabled Possible Values Use \"true\" to enable. Optional Configuring a custom transport \u00b6 Config Heading [[custom.transport]] This config heading is used to group the parameters for a custom transport implementation that you want to use in your product. Default Disabled Optional Parameters class The transport class implementation. Default Possible Values A qualified class name. Mandatory protocol ........ Default \"ISO8583\" Possible Values Mandatory parameter.port ........ Default \"8081\" Possible Values Mandatory parameter.hostname ........ Default \"$conf{deployment.node_ip}\" Possible Values Mandatory Configuring the mediation process \u00b6 Config Heading [mediation] Add this config heading to the ei.toml file to group the parameters for tuning the mediation process (Synapse engine) of the ESB. These parameters are mainly used when mediators such as Iterate and Clone (which leverage on internal thread pools) are used. Default Enabled with default parameters. Mandatory Parameters synapse.core_threads The initial number of synapse threads in the pool. This parameter is applicable only if the Iterate or the Clone mediator is used to handle a higher load. The number of threads specified for this parameter should be increased as required to balance an increased load. Default \"20\" Possible Values Depends on the environment. Mandatory synapse.max_threads The maximum number of synapse threads in the pool. This parameter is applicable only if the Iterate or the Clone mediator is used to handle a higher load. The number of threads specified for this parameter should be increased as required to balance an increased load. Default \"100\" Possible Values Depends on the environment. Mandatory synapse.threads_queue_length The length of the queue that is used to hold the runnable tasks to be executed by the pool. This parameter is applicable only if the Iterate or the Clone mediator is used to handle a higher load. Default \"10\" Possible Values Depends on the environment. Mandatory synapse.global_timeout_interval_millis The maximum number of milliseconds within which a response for the request should be received. A response which arrives after the specified number of seconds cannot be correlated with the request. Hence, a warning all be logged and the request will be dropped. This parameter is also referred to as the time-out handler. Default \"120000\" Possible Values Depends on the environment. Mandatory synapse.preserve_namespace_on_xml_to_json ........... Default Possible Value Mandatory statistics.enable_clean ........... Default Possible Value Mandatory statistics.clean_interval_millis ........... Default Possible Value Mandatory","title":"Configuration Catalog"},{"location":"references/ei_config_catalog/#configuration-catalog","text":"This document describes all the configuration parameters that are used in WSO2 API Manager.","title":"Configuration Catalog"},{"location":"references/ei_config_catalog/#instructions-for-use","text":"Select the configuration sections, parameters, and values that are required for your use and add them to the .toml file. See the example .toml file given below. ## This is an example .toml file. [deployment] ##Config section. pattern=\"value\" ##Parameter-value pair. node_act_as=\"value\" ##Parameter-value pair. [key_mgr_node] ##Config section. endpoints=\"value\" ##Parameter-value pair. [gateway]. ##Config section. gateway_environments=[\"dev\",\"test\"] ##Parameter-value pair. [[database]] ##Config section pool_options.maxActiv=\"5\"","title":"Instructions for use"},{"location":"references/ei_config_catalog/#configuring-the-default-deployment-settings","text":"Config Heading [server] This toml header groups the parameters that define the server node details. Default Enabled with default settings. Mandatory Parameters hostname The hostname of the computer on which the product server is running. Default \"localhost\" Mandatory node_ip The IP address of the computer on which the product server is running. Default \"127.0.0.1\" Mandatory enable_mtom Use this paramater to enable MTOM (Message Transmission Optimization Mechanism) for the product server. Read more about MTOM messaging. Optional Default MTOM is disabled. Possible Values \"true\" to enable MTOM. enable_swa Use this paramater to enable SwA (SOAP with Attachments) for the product server. When SwA is enabled, the ESB will process the files attached to SOAP messages. Read more about SwA messaging. Default SwA is disabled. Possible Values Use \"true\" to enable SwA. Optional","title":"Configuring the default deployment settings"},{"location":"references/ei_config_catalog/#connecting-to-the-primary-data-store","text":"Config Heading [database.shared_db] This config heading that groups the parameters connecting the server to the primary database. This database stores the user permissions that apply to user roles. This also stores the users and roles unless a separate user store is configured with the [user_store] config section. Read more about setting up databases for WSO2 EI. Default The embedded H2 database (stored in the EI_HOME/repository/database/ directory) is enabled. Mandatory Parameters type The type of database that is used for the primary database. All the database types that are supported by this product is listed below as possible values. Optional Default \"H2\" Possible Values \"H2\" (not recommended for production environments), \"MySql\", \"Oracle\", \"Postgre\" url The connection URL of the database. Note that this is specific to the database type you are using. Default Mandatory username The user name for connecting to the primary database. Default \"wso2carbon\" Mandatory password The password for connecting to the database. Default \"wso2carbon\" Mandatory","title":"Connecting to the primary data store"},{"location":"references/ei_config_catalog/#tuning-the-primary-data-store-connection","text":"Config Heading [database.shared_db.pool_options] This config heading in the ei.toml file groups the performance tuning parameters of the primary database that you configured using the [database.shared_db] section. Read more about tuning database performance in WSO2 EI. Default Enabled with default settings. Mandatory Parameters maxActive The maximum number of active connections that can be allocated at the same time from the connection pool. If there are too many active connections in the connection pool, some of them would be idle, which incurs an unnecessary system overhead. Default \"50\" Possible Values Depends on environment. Enter any negative value to denote an unlimited number of active connections. Optional maxWait The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. Default \"6000\" Possible Values Depends on environment. Enter zero or a negative value to wait indefinitely. Optional testOnBorrow Determines whether objects are validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another. Default Enabled Possible Value Use \"false\" to disable testOnBorrow. Optional validationInterval Connections are validated (at the most) at this frequency (time in milliseconds). If a connection is due for validation but has been validated previously within this interval, it will not be validated again. This avoids access validation. Default \"30000\" Possible Values Depends on environment. Optional defaultAutoCommit Specifies whether each SQL statement should be automatically committed when the operation is completed. It is recommended to disable auto committing. Default Enabled Possible Values Use \"false\" to disable default auto commit. Optional","title":"Tuning the primary data store connection"},{"location":"references/ei_config_catalog/#connecting-to-the-user-stores","text":"Config Heading [user_store] This config heading in the ei.toml connects the server to the user store. The user store holds the users and roles defined for the system. Read more about user management in WSO2 EI. Default The primary database is enabled as the user store. Mandatory Parameters type The type of user store. Default \"database\" Possible Values \"database\" refers the embedded H2 database with the settings defined under [database.shared_db], \"JDBC\" refers an external RDBMS. \"RW LDAP\" refers an external LDAP with both read/write access, \"RO LDAP\" refers an external LDAP with read only access, \"AD\" refers an active directory user store, \"Custom\" refers a custom user store implementation. Mandatory connection_url The connection URL of the LDAP or AD user store. Default Not used. Optional connection_name The connection name of an LDAP/AD user store. Default Not used. Possible Values \"uid=admin,ou=wso2ei\" Optional connection_password The password for connecting to an LDAP/AD user store. Default Not used. Possible Values \"$secret{ldap_password}\" is used to refer the ....... Optional base_dn The ........ Default Not used. Possible Values \"dc=example,dc=com\"","title":"Connecting to the user stores"},{"location":"references/ei_config_catalog/#configuring-the-system-administrator","text":"Config Heading [super_admin] : The config heading in the ei.toml file that groups the parameters defining the system adminsitrator. Default Enabled with the default parameters. Mandatory Parameters username The user name of the system administrator. This user has all permissions enabled by default. Default \"admin\" Possible Values Any alpha numeric value. Mandatory password The password of the system adminsitrator. Default \"admin\" Possible Values Any alpha numeric value. Mandatory create_admin_account Sets whether the system administrator credentials should be created in the system at the time of starting the server. Default Enabled Possible Values Use \"false\" to disable. Mandatory","title":"Configuring the system administrator"},{"location":"references/ei_config_catalog/#configuring-the-keystore","text":"Config Heading [keystore.tls] This config heading in the ei.toml file groups the parameters that connect the server to the keystore used for SSL handshaking when the server communicates with another server. All keystore files used by this product should be stored in the EI_HOME/repository/resources/security/ directory. The product is configured to use the default keystore (wso2carbon.jks), which contains the key pair that is used for all encryption/decryption purposes. Read more about asymetric encryption in WSO2 EI. Default Enabled with default parameters. Mandatory Parameters file_name The name of the keystore file that is used for SSL communication. Default \"wso2carbon.jks\" Mandatory type The type of the keystore file. Default \"JKS\" Possible Values \"JKS\" or \"PKCS12\" Optional password The password of the keystore file that is used for SSL communication. The keystore password is used when accessing the keys in the keystore. Default \"wso2carbon\" Mandatory alias The alias of the public key corresponding to the private key that is included in the keystore. The public key is used for encrypting data in the ESB server, which only the corresponding private key can decrypt. The public key is embedded in a digital certificate, and this certificate can be shared over the internet by storing it in a separate trust store file. Default \"wso2carbon\" Mandatory key_password The password of the private key that is included in the keystore. The private key is used to decrypt the data that has been encrypted using the keystore's public key. Default \"wso2carbon\" Mandatory","title":"Configuring the keystore"},{"location":"references/ei_config_catalog/#configuring-the-truststore","text":"Config Heading [truststore] Add this config heading to the ei.toml file to group the parameters that connect the server to the keystore file (trust store) that is used to store the digital certificates that the server trusts for SSL communication. All keystore files used by this product should be stored in the EI_HOME/repository/resources/security/ directory. The product is configured to use the default trust store (wso2truststore.jks), which contains the self-signed digital certificate of the default keystore. Read more about asymetric encryption in WSO2 EI. Default Enabled with default parameters. Mandatory Parameters file_name The name of the keystore file that is used for storing the trusted digital certificates. Default \"wso2truststore.jks\" Mandatory type The type of the keystore file that is used as the trust store. Default \"JKS\" Possible Values \"JKS\" or \"PKCS12\" Optional password The password of the keystore file that is used as the trust store. Default \"wso2carbon\" Possible Values See the content on generating keystores. Mandatory alias The alias is the password of the digital certificate (which holds the public key) that is included in the trustore. Default \"symmetric.key.value\" Possible Values See the content on generating digital certificates. Mandatory algorithm The password of the ... Default \"AES\" Possible Value Mandatory","title":"Configuring the truststore"},{"location":"references/ei_config_catalog/#configuring-the-http-transport","text":"Config Heading [transport.http] Add this config heading to the ei.toml file to group the parameters for configuring the HTTP/S transports in the product. Default Disabled. Optional Parameters socket_timeout_millis ................ Default \"180000\" Possible Values Mandatory listener.port The port on which this transport receiver should listen for incoming messages. Default \"8280\" Possible Values Mandatory listener.wsdl_epr_prefix A URL prefix which will be added to all service EPRs and EPRs in WSDLs etc. Default \"https://apachehost:port/somepath\" Possible Values Mandatory listener.secured_port The port on which this transport receiver should listen for incoming messages. Default \"8280\" Possible Values Mandatory listener.secured_wsdl_epr_prefix A URL prefix which will be added to all service EPRs and EPRs in WSDLs etc. Default \"https://apachehost:port/somepath\" Possible Values Mandatory sender.warn_on_http_500 ........ Default \"*\" Possible Value Mandatory sender.proxy_hostname If the outgoing messages should be sent through an HTTP proxy server, use this parameter to specify the target proxy. Default \"${deployement.node_ip}\" Possible Value Mandatory sender.proxy_port The port through which the target proxy accepts HTTP traffic. Default \"3128\" Possible Value Mandatory sender.non_proxy_hostnames The list of hosts to which the HTTP traffic should be sent directly without going through the proxy. When trying to add multiple hostnames along with an asterisk in order to define a set of sub-domains for non-proxy hosts, you need to add a period before the asterisk when configuring proxy server. \".*.abc.my.com|localhost\" Default \"localhost|moon|sun\" Possible Value Mandatory blocking_sender.enable_client_caching This parameter is used to specify whether the HTTP client should save cache entries and the cached responses in the JVM memory or not. Default Enabled Possible Value Use \"false\" to disable. Mandatory blocking_sender.transfer_encoding This parameter enables you to specify whether the data sent should be chunked. It can be used instead of the Content-Length header if you want to upload data without having to know the amount of data to be uploaded in advance. Default \"chunked\" Possible Value Mandatory blocking_sender.default_connections_per_host The maximum number of connections that will be created per host server by the client. If the backend server is slow, the connections in use at a given time will take a long time to be released and added back to the connection pool. As a result, connections may not be available for some requests and you may get the org.apache.commons.httpclient.ConnectionPoolTimeoutException: Timeout waiting for connection error. In such situations, it is recommended to increase the value for this parameter. Default \"200\" Possible Value Mandatory blocking_sender.omit_soap12_action If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages. Default Enabled Possible Value Use \"fales\" to disable. Mandatory","title":"Configuring the HTTP transport"},{"location":"references/ei_config_catalog/#configuring-the-local-transport","text":"Config Heading [transport.local] This parameter is used to enable the listeners and senders when the ESB server communicates through the local transport. Default Disabled Optional Parameters listener.enable The parameter for enabling the local transport listener. Default Disabled Possible Values Mandatory sender.enable The parameter for enabling the local transport sender. Default Disabled Possible Values Mandatory","title":"Configuring the Local transport"},{"location":"references/ei_config_catalog/#configuring-the-vfs-transport","text":"Config Heading [transport.vfs] Add this config heading to the ei.toml file to group the parameters that configure the ESB server to communicate through the VFS transport. Read more about file transfering in the ESB. Default Enabled Mandatory Parameters listener.enable The parameter for enabling the VFS listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory sender.enable The parameter for enabling the VFS sender in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory","title":"Configuring the VFS transport"},{"location":"references/ei_config_catalog/#configuring-the-mail-transport","text":"Config Heading [transport.mail] Add this config heading to the ei.toml file to group the parameters that configure the ESB server to communicate through the MAIL transport. Read more about using the MAIL transport. Default Disabled Optional Parameters listener.enable The parameter for enabling the MAIL transport listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory sender.hostname ..... Default \"smtp.gmail.com\" Possible Values Mandatory sender.port ...... Default 587 Possible Values Mandatory sender.enable_tls Specifies whether TLS should be enabled. Default Enabled. Possible Values Use \"true\" to enable. Mandatory sender.auth Specifies whether the user should be authenticated. Default Enabled. Possible Values Use \"true\" to enable. Mandatory sender.username The user name of the email account (mail sender). Note that in some email service providers, the user name is the same as the email address specified for the 'From' parameter. Default \"demo_user\" Possible Values Mandatory sender.password The password of the email account (mail sender). Default \"mailpassword\" Possible Values Mandatory sender.from The email address from which mails will be sent. Default \"demo_user@wso2.com\" Possible Values Mandatory","title":"Configuring the MAIL transport"},{"location":"references/ei_config_catalog/#configuring-the-fix-transport","text":"Config Heading [transport.fix] Add this config heading to the ei.toml to group the parameters that configure the ESB server to communicate through the FIX transport. Read more about how the ESB uses FIX communication. Default Disabled Optional Parameters listener.enable The parameter for enabling the FIX listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory sender.enable The parameter for enabling the FIX sender in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory","title":"Configuring the FIX transport"},{"location":"references/ei_config_catalog/#configuring-the-hl7-transport","text":"Config Heading [transport.hl7] Add this config heading to group the parameters that configure the ESB server communicate through the HL7 transport. Read more about HL7 communication in the ESB. Default Disabled Optional Parameters listener.enable The parameter for enabling the HL7 listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory sender.enable The parameter for enabling the HL7 sender in the ESB. Default Disabled Possible Values Use \"true\" to enable. Mandatory","title":"Configuring the HL7 transport"},{"location":"references/ei_config_catalog/#configuring-the-sap-transport","text":"Config Heading [transport.sap] Add this config heading to the ei.toml file to group the parameters that configure the ESB to communicate with a SAP system. Read more about SAP integration of the ESB. Default Disabled Optional Parameters listener.enable The parameter for enabling the SAP listener in the ESB. Default Disabled Possible Values Use \"true\" to enable. Optional sender.enable The parameter for enabling the SAP sender in the ESB. Default Disabled Possible Values Use \"true\" to enable. Optional","title":"Configuring the SAP transport"},{"location":"references/ei_config_catalog/#configuring-a-custom-transport","text":"Config Heading [[custom.transport]] This config heading is used to group the parameters for a custom transport implementation that you want to use in your product. Default Disabled Optional Parameters class The transport class implementation. Default Possible Values A qualified class name. Mandatory protocol ........ Default \"ISO8583\" Possible Values Mandatory parameter.port ........ Default \"8081\" Possible Values Mandatory parameter.hostname ........ Default \"$conf{deployment.node_ip}\" Possible Values Mandatory","title":"Configuring a custom transport"},{"location":"references/ei_config_catalog/#configuring-the-mediation-process","text":"Config Heading [mediation] Add this config heading to the ei.toml file to group the parameters for tuning the mediation process (Synapse engine) of the ESB. These parameters are mainly used when mediators such as Iterate and Clone (which leverage on internal thread pools) are used. Default Enabled with default parameters. Mandatory Parameters synapse.core_threads The initial number of synapse threads in the pool. This parameter is applicable only if the Iterate or the Clone mediator is used to handle a higher load. The number of threads specified for this parameter should be increased as required to balance an increased load. Default \"20\" Possible Values Depends on the environment. Mandatory synapse.max_threads The maximum number of synapse threads in the pool. This parameter is applicable only if the Iterate or the Clone mediator is used to handle a higher load. The number of threads specified for this parameter should be increased as required to balance an increased load. Default \"100\" Possible Values Depends on the environment. Mandatory synapse.threads_queue_length The length of the queue that is used to hold the runnable tasks to be executed by the pool. This parameter is applicable only if the Iterate or the Clone mediator is used to handle a higher load. Default \"10\" Possible Values Depends on the environment. Mandatory synapse.global_timeout_interval_millis The maximum number of milliseconds within which a response for the request should be received. A response which arrives after the specified number of seconds cannot be correlated with the request. Hence, a warning all be logged and the request will be dropped. This parameter is also referred to as the time-out handler. Default \"120000\" Possible Values Depends on the environment. Mandatory synapse.preserve_namespace_on_xml_to_json ........... Default Possible Value Mandatory statistics.enable_clean ........... Default Possible Value Mandatory statistics.clean_interval_millis ........... Default Possible Value Mandatory","title":"Configuring the mediation process"},{"location":"references/mediator-catalog/","text":"","title":"Mediator catalog"},{"location":"setup/installation-guide/","text":"","title":"Installation guide"},{"location":"use-cases/guides/","text":"","title":"Guides"}]}